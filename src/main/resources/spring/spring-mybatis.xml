<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-4.3.xsd
                           http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <!-- 扫描service包下所有使用注解的类型 -->
    <context:component-scan base-package="com.liuwq.service"/>

    <!-- 配置数据库相关参数properties的属性：${url} -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 数据库连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxPoolSize" value="${c3p0.maxPoolSize}"/>
        <property name="minPoolSize" value="${c3p0.minPoolSize}"/>
        <property name="autoCommitOnClose" value="${c3p0.autoCommitOnClose}"/>
        <property name="checkoutTimeout" value="${c3p0.checkoutTimeout}"/>
        <property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"/>
    </bean>

    <!-- 配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 扫描model包 使用别名 -->
        <property name="typeAliasesPackage" value="com.liuwq.po"/>
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/>
        <!-- 指定mybatis全局配置文件的位置 -->
        <property name="configLocation" value="classpath:spring/mybatis-config.xml"></property>
    </bean>

    <!-- 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.liuwq.dao"/>
        <!-- 扫描指定Repository注解 -->
        <!--<property name="annotationClass" value="org.springframework.stereotype.Repository"></property>-->
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置事务增强 -->
    <tx:advice id="txAdvice">
        <tx:attributes>
            <!-- 对insert,update,delete,register 开头的方法进行事务管理,只要有异常就回滚 -->
            <tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="register*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="cancel*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="change*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="execute*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="exec*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <!-- 对其他方法 使用默认的事务管理 -->
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!-- 开启基于注解的事务 -->
    <aop:config>
        <!-- 切入点表达式 -->
        <aop:pointcut id="txPoint" expression="execution(* com.liuwq.service..*(..))"></aop:pointcut>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint" />
    </aop:config>

    <!-- 启用对事务注解的支持 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>